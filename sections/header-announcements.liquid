{%- liquid
  assign section_settings = section.settings
  assign section_blocks = section.blocks
  assign should_render = false

  if section_blocks.size > 0
    assign should_render = true
  endif
-%}

{%- if should_render -%}
  <style>
    .header-announcements {
      position: relative;
      overflow: hidden;
      padding-top: 10px;
      padding-bottom: 10px;
      /* Set height to fit one line of text */
      height: 3.5em; 
    }
    
    .header-announcements__slide {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      
      /* Animation properties */
      opacity: 0;
      transform: translateY(100%);
      transition: all 0.6s ease-in-out;
    }

    .header-announcements__slide.is-active {
      opacity: 1;
      transform: translateY(0);
    }
    
    .header-announcements__slide.is-exiting {
      opacity: 0;
      transform: translateY(-100%);
    }

    .header-announcements__slide p {
      margin: 0;
    }
  </style>

  <div
    class="header-announcements"
    id="announcement-slider-{{ section.id }}"
    data-section-id="{{ section.id }}"
    data-delay="{{ section_settings.delay }}"
    style="color: {{ section_settings.text_color }}; background-color: {{ section_settings.background_color }};"
  >
    <div class="header-announcements__container">
      {%- for block in section_blocks -%}
        <div class="header-announcements__slide">
          {{ block.settings.text }}
        </div>
      {%- endfor -%}
    </div>
  </div>

  <script>
    class VerticalAnnouncementSlider {
      constructor(element) {
        this.bar = element;
        this.slides = this.bar.querySelectorAll('.header-announcements__slide');
        this.delay = parseInt(this.bar.dataset.delay, 10) * 1000;
        this.transitionTime = 600; // Must match CSS transition time in ms
        this.currentIndex = 0;

        if (this.slides.length > 1) {
          this.init();
        }
      }

      init() {
        // Show the first slide immediately
        if (this.slides.length > 0) {
          this.slides[0].classList.add('is-active');
        }

        // Start the slider loop
        setInterval(() => {
          this.nextSlide();
        }, this.delay);
      }
      
      nextSlide() {
        const currentSlide = this.slides[this.currentIndex];
        const nextIndex = (this.currentIndex + 1) % this.slides.length;
        const nextSlide = this.slides[nextIndex];

        // Animate out the current slide
        currentSlide.classList.add('is-exiting');

        // Animate in the next slide
        nextSlide.classList.add('is-active');

        // After the animation finishes, clean up the classes
        setTimeout(() => {
          currentSlide.classList.remove('is-active', 'is-exiting');
        }, this.transitionTime);

        // Update the current index
        this.currentIndex = nextIndex;
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const sliderElement = document.getElementById('announcement-slider-{{ section.id }}');
      if (sliderElement) {
        new VerticalAnnouncementSlider(sliderElement);
      }
    });

    // Re-initialize slider on theme editor changes
    document.addEventListener('shopify:section:load', (event) => {
      if (event.detail.sectionId === '{{ section.id }}') {
        const sliderElement = document.getElementById('announcement-slider-{{ section.id }}');
        if (sliderElement) {
          new VerticalAnnouncementSlider(sliderElement);
        }
      }
    });
  </script>
{%- endif -%}

{% schema %}
{
  "name": "Announcement bar",
  "settings": [
    {
      "type": "color",
      "id": "background_color",
      "label": "Background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#FFFFFF"
    },
    {
      "type": "range",
      "id": "delay",
      "min": 2,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Slide delay",
      "default": 4
    }
  ],
  "blocks": [
    {
      "type": "announcement",
      "name": "Announcement",
      "settings": [
        {
          "type": "richtext",
          "id": "text",
          "label": "Text",
          "default": "<p>Your announcement here</p>"
        }
      ]
    }
  ],
  "default": {
    "blocks": [
      {
        "type": "announcement"
      },
      {
        "type": "announcement",
        "settings": {
          "text": "<p>A second announcement</p>"
        }
      }
    ]
  }
}
{% endschema %}